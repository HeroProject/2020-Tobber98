source('~/Documents/thesis-git/data-analysis/cronbach-alpha.R', echo=TRUE)
source('~/Documents/thesis-git/data-analysis/cronbach-alpha.R', echo=TRUE)
source('~/Documents/thesis-git/data-analysis/cronbach-alpha.R', echo=TRUE)
source('~/Documents/thesis-git/data-analysis/cronbach-alpha.R', echo=TRUE)
# open file
df <- read.csv("simon_says_data_test.csv")
# open file
df <- read.csv("simon_says_data_test.csv")
# open file
df <- read.csv("simon_says_data_test.csv")
# open file
df <- read.csv("game_data/simon_says_data_test.csv")
# open file
df <- read.csv("game_data/simon_says_data_test.csv", ';')
# open file
df <- read.csv("game_data/simon_says_data_test.csv", ';')
# open file
install.packages("readxl")
install.packages("readxl")
install.packages("readxl")
install.packages("readxl")
# open file
install.packages("readxl")
install.packages("readxl")
install.packages("readxl")
install.packages('readxl')
install.packages("readxl")
install.packages("readxl")
# open file
library('readxl')
df <- read.csv("game_data/simon_says_data_test.csv", ';')
df <- read_excel("game_data/simon_says_data_test.xlsx")
df_basic <- subset(df, version=='basic')
df_extended <- subset(df, version=='extended')
View(df_basic)
View(df_extended)
library("dplyr")
library("ggpubr")
value = 'play_time'
shapiro.test(df_basic[[value]])
basic_qqplot <- ggqqplot(df_basic[[value]])
basic_densityplot <- ggdensity(df_basic[[value]])
shapiro.test(df_extended[[value]])
extended_qqplot <- ggqqplot(df_extended[[value]])
extended_densityplot <- ggdensity(df_extended[[value]])
ggarrange(basic_qqplot, extended_qqplot, basic_densityplot, extended_densityplot,
ncol = 2, nrow = 2)
value = 'high_score'
shapiro.test(df_basic[[value]])
basic_qqplot <- ggqqplot(df_basic[[value]])
basic_densityplot <- ggdensity(df_basic[[value]])
shapiro.test(df_extended[[value]])
extended_qqplot <- ggqqplot(df_extended[[value]])
extended_densityplot <- ggdensity(df_extended[[value]])
ggarrange(basic_qqplot, extended_qqplot, basic_densityplot, extended_densityplot,
ncol = 2, nrow = 2)
value = 'avg_score'
shapiro.test(df_basic[[value]])
basic_qqplot <- ggqqplot(df_basic[[value]])
basic_densityplot <- ggdensity(df_basic[[value]])
shapiro.test(df_extended[[value]])
extended_qqplot <- ggqqplot(df_extended[[value]])
extended_densityplot <- ggdensity(df_extended[[value]])
ggarrange(basic_qqplot, extended_qqplot, basic_densityplot, extended_densityplot,
ncol = 2, nrow = 2)
value = 'times_player'
shapiro.test(df_basic[[value]])
basic_qqplot <- ggqqplot(df_basic[[value]])
basic_densityplot <- ggdensity(df_basic[[value]])
shapiro.test(df_extended[[value]])
extended_qqplot <- ggqqplot(df_extended[[value]])
extended_densityplot <- ggdensity(df_extended[[value]])
ggarrange(basic_qqplot, extended_qqplot, basic_densityplot, extended_densityplot,
ncol = 2, nrow = 2)
value = 'times_spoken'
shapiro.test(df_basic[[value]])
basic_qqplot <- ggqqplot(df_basic[[value]])
basic_densityplot <- ggdensity(df_basic[[value]])
shapiro.test(df_extended[[value]])
extended_qqplot <- ggqqplot(df_extended[[value]])
extended_densityplot <- ggdensity(df_extended[[value]])
ggarrange(basic_qqplot, extended_qqplot, basic_densityplot, extended_densityplot,
ncol = 2, nrow = 2)
ggarrange(basic_qqplot, extended_qqplot, basic_densityplot, extended_densityplot,
ncol = 2, nrow = 2)
for (category in colnames(df))
{
print(category)
print(wilcox.test(df_basic[[category]], df_extended[[category]]))
}
for (category in colnames(df))
{
if (category != 'time')
{
print(category)
print(wilcox.test(df_basic[[category]], df_extended[[category]]))
}
}
for (category in colnames(df))
{
if (category != 'time' || category != 'version')
{
print(category)
print(wilcox.test(df_basic[[category]], df_extended[[category]]))
}
}
for (category in colnames(df))
{
if (category != 'time' && category != 'version')
{
print(category)
print(wilcox.test(df_basic[[category]], df_extended[[category]]))
}
}
for (category in colnames(df))
{
if (category != 'time' && category != 'version' && category != 'remarks')
{
print(category)
print(wilcox.test(df_basic[[category]], df_extended[[category]]))
}
}
for (category in colnames(df))
{
if (category != 'time' && category != 'version' && category != 'remarks' && category != 'id')
{
print(category)
print(t.test(df_basic[[category]], df_extended[[category]]))
}
}
library(psych)
library(crayon)
# open file and add version, split dataset on version.
df <- read.csv("BSc-thesis-questionnaire.csv")
# open file and add version, split dataset on version.
df <- read.csv("questionnaire_data/BSc-thesis-questionnaire.csv")
df$version = list('extended', 'basic', 'basic', 'extended', 'basic', 'extended', 'extended', 'basic', 'basic',
'extended', 'basic', 'extended', 'extended', 'basic', 'extended', 'basic', 'extended', 'basic',
'basic', 'extended', 'basic', 'extended', 'extended', 'basic', 'basic', 'extended', 'extended',
'basic', 'basic', 'extended', 'basic', 'extended', 'basic', 'extended', 'basic', 'extended')
df_basic <- subset(df, version=='basic')
df_extended <- subset(df, version=='extended')
df_basic_first <- subset(df, version=='basic', first == 'basic')
df_basic_first <- subset(df, version=='basic' && first == 'basic')
df_basic_first <- subset(df, (version=='basic' && first == 'basic'))
df_basic_first <- subset(df, first=='basic')
df$first = list('extended', 'extended', 'basic', 'basic', 'basic', 'basic', 'extended', 'extended', 'basic', 'basic',
'basic', 'basic', 'extended', 'extended', 'extended', 'extended', 'extended', 'extended',
'basic', 'basic', 'basic', 'basic', 'extended', 'extended', 'basic', 'basic', 'extended', 'extended',
'basic', 'basic', 'extended', 'extended', 'basic', 'basic', 'extended', 'extended')
df_basic_first <- subset(df, first=='basic')
# open file and add version, split dataset on version.
df <- read.csv("questionnaire_data/BSc-thesis-questionnaire.csv")
df$version = list('extended', 'basic', 'basic', 'extended', 'basic', 'extended', 'extended', 'basic', 'basic',
'extended', 'basic', 'extended', 'extended', 'basic', 'extended', 'basic', 'extended', 'basic',
'basic', 'extended', 'basic', 'extended', 'extended', 'basic', 'basic', 'extended', 'extended',
'basic', 'basic', 'extended', 'basic', 'extended', 'basic', 'extended', 'basic', 'extended')
df$first = list('extended', 'extended', 'basic', 'basic', 'basic', 'basic', 'extended', 'extended', 'basic', 'basic',
'basic', 'basic', 'extended', 'extended', 'extended', 'extended', 'extended', 'extended',
'basic', 'basic', 'basic', 'basic', 'extended', 'extended', 'basic', 'basic', 'extended', 'extended',
'basic', 'basic', 'extended', 'extended', 'basic', 'basic', 'extended', 'extended')
df_basic <- subset(df, version=='basic')
df_extended <- subset(df, version=='extended')
df_basic_first <- subset(df, first=='basic')
View(df_basic)
df_basic_first <- subset(df_basic, first=='basic')
df_basic_first <- subset(df_basic, first=='basic')
df_basic_second <- subset(df_basic, first=='extended')
df_extended_first <- subset(df_extended, first=='extended')
df_extended_second <- subset(df_extended, first=='basic')
# list of categories
categories <- list(positive_affect = c(6, 8, 13, 17),
negative_affect = c(9, 10, 15),
competence = c(7, 14, 16, 18),
challenge = c(11, 22, 24, 27, 28),        # probably should be dropped
flow = c(12, 21, 23, 26),
tension_annoyance = c(19, 20, 25),
# social game behaviour
empathy = c(28, 31, 35, 36, 37, 40),
behavioural_involvement = c(29, 30, 32, 33, 41, 42),
negative_feelings = c(34, 38, 39, 43, 44), # probably should be dropped
# ...
positive_experience = c(45, 48, 50, 51, 53, 56),
negative_experience = c(46, 47, 49, 52, 54, 55),
# friendship functions
help = c(57, 60, 67, 69),
emotional_security = c(58, 62, 63, 66, 67),
self_validation = c(59, 61, 64, 65, 68))
for (category in names(categories))
{
cat(green('\n\n#---------------------------- ', category, ' ----------------------------#'))
cat(red('\n\nbasic'))
print(psych::alpha(df_basic[categories[[category]]]))
cat(red('\nextended'))
print(psych::alpha(df_extended[categories[[category]]]))
}
for (category in colnames(df))
{
if (category != 'time' && category != 'version' && category != 'remarks' && category != 'id')
{
print(category)
print(t.test(df_basic[[category]], df_extended[[category]]))
}
}
# open file
library('readxl')
df <- read_excel("game_data/simon_says_data_test.xlsx")
df_basic <- subset(df, version=='basic')
df_extended <- subset(df, version=='extended')
library("dplyr")
library("ggpubr")
value = 'times_spoken'
shapiro.test(df_basic[[value]])
basic_qqplot <- ggqqplot(df_basic[[value]])
basic_densityplot <- ggdensity(df_basic[[value]])
shapiro.test(df_extended[[value]])
extended_qqplot <- ggqqplot(df_extended[[value]])
extended_densityplot <- ggdensity(df_extended[[value]])
ggarrange(basic_qqplot, extended_qqplot, basic_densityplot, extended_densityplot,
ncol = 2, nrow = 2)
ggarrange(basic_qqplot, extended_qqplot, basic_densityplot, extended_densityplot,
ncol = 2, nrow = 2)
for (category in colnames(df))
{
if (category != 'time' && category != 'version' && category != 'remarks' && category != 'id')
{
print(category)
print(t.test(df_basic[[category]], df_extended[[category]]))
}
}
source('~/Documents/thesis-git/data-analysis/questionnaire_data/cronbach-alpha.R', echo=TRUE)
# for (category in names(categories))
# {
#   cat(green('\n\n#---------------------------- ', category, ' ----------------------------#'))
#   cat(red('\n\nbasic'))
#   print(psych::alpha(df_basic[categories[[category]]]))
#   cat(red('\nextended'))
#   print(psych::alpha(df_extended[categories[[category]]]))
# }
source('~/Documents/thesis-git/data-analysis/questionnaire_data/cronbach-alpha.R', echo=TRUE)
source('~/Documents/thesis-git/data-analysis/game_data/normality.R', echo=TRUE)
source('~/Documents/thesis-git/data-analysis/game_data/non-parametric-test.R', echo=TRUE)
source('~/Documents/thesis-git/data-analysis/game_data/t-test.R', echo=TRUE)
source('~/Documents/thesis-git/data-analysis/game_data/non-parametric-test.R', echo=TRUE)
source('~/Documents/thesis-git/data-analysis/questionnaire_data/non-parametric-test.R', echo=TRUE)
source('~/Documents/thesis-git/data-analysis/questionnaire_data/cronbach-alpha.R', echo=TRUE)
source('~/Documents/thesis-git/data-analysis/questionnaire_data/normality.R', echo=TRUE)
source('~/Documents/thesis-git/data-analysis/questionnaire_data/cronbach-alpha.R', echo=TRUE)
source('~/Documents/thesis-git/data-analysis/questionnaire_data/cronbach-alpha.R', echo=TRUE)
source('~/Documents/thesis-git/data-analysis/questionnaire_data/calculate_mean.R', echo=TRUE)
source('~/Documents/thesis-git/data-analysis/questionnaire_data/normality.R', echo=TRUE)
source('~/Documents/thesis-git/data-analysis/game_data/non-parametric-test.R', echo=TRUE)
source('~/Documents/thesis-git/data-analysis/game_data/non-parametric-test.R', echo=TRUE)
source('~/Documents/thesis-git/data-analysis/game_data/non-parametric-test.R', echo=TRUE)
for (category in categories_means)
source('~/Documents/thesis-git/data-analysis/game_data/non-parametric-test.R', echo=TRUE)
library(psych)
library(crayon)
# open file and add version, split dataset on version.
df <- read.csv("questionnaire_data/BSc-thesis-questionnaire.csv")
df$version = c('extended', 'basic', 'basic', 'extended', 'basic', 'extended', 'extended', 'basic', 'basic',
'extended', 'basic', 'extended', 'extended', 'basic', 'extended', 'basic', 'extended', 'basic',
'basic', 'extended', 'basic', 'extended', 'extended', 'basic', 'basic', 'extended', 'extended',
'basic', 'basic', 'extended', 'basic', 'extended', 'basic', 'extended', 'basic', 'extended')
View(df_basic)
categories$negative_affect = c(10, 15)           # Not sure if two is enough...
categories$flow = c(12, 21, 23)
categories$tension_annoyance = c(19, 20)         # Not sure if two is enough...
for (category in names(categories))
{
cat(green('\n\n#---------------------------- ', category, ' ----------------------------#'))
cat(red('\n\nbasic'))
print(psych::alpha(df_basic[categories[[category]]]))
cat(red('\nextended'))
print(psych::alpha(df_extended[categories[[category]]]))
}
for (category in names(categories))
{
cat(green('\n\n#---------------------------- ', category, ' ----------------------------#'))
cat(red('\n\nbasic'))
print(psych::alpha(df_basic[categories[[category]]], delete=FALSE))
cat(red('\nextended'))
print(psych::alpha(df_extended[categories[[category]]]))
}
for (category in names(categories))
{
cat(green('\n\n#---------------------------- ', category, ' ----------------------------#'))
cat(red('\n\nbasic'))
print(psych::alpha(df_basic[categories[[category]]], check.keys = FALSE))
cat(red('\nextended'))
print(psych::alpha(df_extended[categories[[category]]], check.keys = FALSE))
}
source('~/Documents/thesis-git/data-analysis/questionnaire_data/cronbach-alpha.R', echo=TRUE)
for (category in names(categories))
{
cat(green('\n\n#---------------------------- ', category, ' ----------------------------#'))
cat(red('\n\nbasic'))
print(psych::alpha(df_basic[categories[[category]]], delete = TRUE))
cat(red('\nextended'))
print(psych::alpha(df_extended[categories[[category]]], delete = TRUE))
}
for (category in names(categories))
{
cat(green('\n\n#---------------------------- ', category, ' ----------------------------#'))
cat(red('\n\nbasic'))
print(psych::alpha(df_basic[categories[[category]]], delete = FALSE))
cat(red('\nextended'))
print(psych::alpha(df_extended[categories[[category]]], delete = FALSE))
}
source('~/Documents/thesis-git/data-analysis/questionnaire_data/calculate_mean.R', echo=TRUE)
source('~/Documents/thesis-git/data-analysis/questionnaire_data/t-test.R', echo=TRUE)
source('~/Documents/thesis-git/data-analysis/questionnaire_data/cronbach-alpha.R', echo=TRUE)
for (category in categories_means)
{
print(category)
print(wilcox.test(df_basic[[category]], df_extended[[category]], conf.int = TRUE))
}
categories_means <- paste(categories_names, '_mean', sep='')
for (category in names(categories))
{
df_basic[[paste(category, '_mean', sep='')]] = rowMeans(df_basic[categories[[category]]])
df_extended[[paste(category, '_mean', sep='')]] = rowMeans(df_extended[categories[[category]]])
}
for (category in categories_means)
{
print(category)
print(wilcox.test(df_basic[[category]], df_extended[[category]], conf.int = TRUE))
}
source('~/Documents/thesis-git/data-analysis/questionnaire_data/t-test.R', echo=TRUE)
source('~/Documents/thesis-git/data-analysis/questionnaire_data/t-test.R', echo=TRUE)
print(x)
ggboxplot(df_basic, df_extended, y = "self_validation_mean",
color = "version", palette = c("#00AFBB", "#E7B800"),
ylab = "Weight", xlab = "Groups")
# non-parametric test
library("ggpubr")
ggboxplot(df_basic, df_extended, y = "self_validation_mean",
color = "version", palette = c("#00AFBB", "#E7B800"),
ylab = "Weight", xlab = "Groups")
ggboxplot(df_basic, df_extended)
ggboxplot(df, x= 'version', y = "self_validation_mean",
color = "version", palette = c("#00AFBB", "#E7B800"),
ylab = "Weight", xlab = "Groups")
ggboxplot(df, x= 'version', y = 'Ik.voelde.me.tevreden',
color = "version", palette = c("#00AFBB", "#E7B800"),
ylab = "Weight", xlab = "Groups")
ggboxplot(df_basic ~ df_extended, x= 'version', y = 'Ik.voelde.me.tevreden',
color = "version", palette = c("#00AFBB", "#E7B800"),
ylab = "Weight", xlab = "Groups")
ggboxplot(data.framed(f_basic, df_extended), x= 'version', y = 'Ik.voelde.me.tevreden',
color = "version", palette = c("#00AFBB", "#E7B800"),
ylab = "Weight", xlab = "Groups")
ggboxplot(data.frame(f_basic, df_extended), x= 'version', y = 'Ik.voelde.me.tevreden',
color = "version", palette = c("#00AFBB", "#E7B800"),
ylab = "Weight", xlab = "Groups")
ggboxplot(data.frame(df_basic, df_extended), x= 'version', y = 'Ik.voelde.me.tevreden',
color = "version", palette = c("#00AFBB", "#E7B800"),
ylab = "Weight", xlab = "Groups")
ggboxplot(data.frame(df_basic, df_extended), x= 'version', y = 'self_validation_mean',
color = "version", palette = c("#00AFBB", "#E7B800"),
ylab = "Weight", xlab = "Groups")
x <- data.frame(df_basic, df_extended)
View(x)
x <- data.frame(df_basic ~ df_extended)
x <- rbind(df_basic, df_extended)
ggboxplot(rbind(df_basic, df_extended), x= 'version', y = 'self_validation_mean',
color = "version", palette = c("#00AFBB", "#E7B800"),
ylab = "Weight", xlab = "Groups")
ggboxplot(rbind(df_basic, df_extended), x= 'version', y = 'self_validation_mean',
color = "version", palette = c("#00AFBB", "#E7B800"),
ylab = "Self Validation Mean", xlab = "Groups")
ggboxplot(rbind(df_basic, df_extended), x= 'version', y = 'flow_mean',
color = "version", palette = c("#00AFBB", "#E7B800"),
ylab = "Self Validation Mean", xlab = "Groups")
ggboxplot(rbind(df_basic, df_extended), x= 'version', y = 'positive_affect_mean',
color = "version", palette = c("#00AFBB", "#E7B800"),
ylab = "Self Validation Mean", xlab = "Groups")
ggboxplot(rbind(df_basic, df_extended), x= 'version', y = 'negative_affect_mean',
color = "version", palette = c("#00AFBB", "#E7B800"),
ylab = "Self Validation Mean", xlab = "Groups")
install.packages('tidyverse')
library(tidyverse)
library(ggpubr)
library(rstatix)
aov <- anova_test(data = x, dv = score, wid = id, within = time)
get_anova_table(aov)
aov <- anova_test(data = x, dv = self_validation_mean, wid = id, within = time)
aov <- anova_test(data = x, dv = self_validation_mean, wid = version)
, within = time
aov <- anova_test(data = x, dv = self_validation_mean, wid = version, within = time)
aov <- anova_test(data = x, dv = self_validation_mean, within = version)
aov <- anova_test(data = x, dv = self_validation_mean, wid = version, within = version)
View(x)
aov <- anova_test(data = x, dv = self_validation_mean, wid = ID..gegeven.door.leider.experiment, within = version)
aov <- anova_test(data = x, dv = self_validation_mean, within = ID..gegeven.door.leider.experiment, wid = version)
x$ID..gegeven.door.leider.experiment
View(x)
res.aov <- anova_test(data = x, dv = self_validation_mean, wid = ID..gegeven.door.leider.experiment, within = version)
View(df)
source('~/Documents/thesis-git/data-analysis/questionnaire_data/cronbach-alpha.R', echo=TRUE)
categories
df$Leeftijd
mean(df$Leeftijd)
sd(df$Leeftijd)
source('~/Documents/thesis-git/data-analysis/questionnaire_data/cronbach-alpha.R', echo=TRUE)
source('~/Documents/thesis-git/data-analysis/questionnaire_data/cronbach-alpha.R', echo=TRUE)
source('~/Documents/thesis-git/data-analysis/questionnaire_data/cronbach-alpha.R', echo=TRUE)
source('~/Documents/thesis-git/data-analysis/questionnaire_data/cronbach-alpha.R', echo=TRUE)
source('~/Documents/thesis-git/data-analysis/questionnaire_data/cronbach-alpha.R', echo=TRUE)
source('~/Documents/thesis-git/data-analysis/questionnaire_data/cronbach-alpha.R', echo=TRUE)
source('~/Documents/thesis-git/data-analysis/questionnaire_data/cronbach-alpha.R', echo=TRUE)
source('~/Documents/thesis-git/data-analysis/questionnaire_data/cronbach-alpha.R', echo=TRUE)
source('~/Documents/thesis-git/data-analysis/questionnaire_data/cronbach-alpha.R', echo=TRUE)
source('~/Documents/thesis-git/data-analysis/questionnaire_data/cronbach-alpha.R', echo=TRUE)
source('~/Documents/thesis-git/data-analysis/questionnaire_data/cronbach-alpha.R', echo=TRUE)
source('~/Documents/thesis-git/data-analysis/questionnaire_data/cronbach-alpha.R', echo=TRUE)
source('~/Documents/thesis-git/data-analysis/questionnaire_data/cronbach-alpha.R', echo=TRUE)
source('~/Documents/thesis-git/data-analysis/questionnaire_data/calculate_mean.R', echo=TRUE)
print(df_basic[[paste(category, '_mean', sep='')]])
print(category)
print('basic' + category)
print('basic', category)
source('~/Documents/thesis-git/data-analysis/questionnaire_data/calculate_mean.R', echo=TRUE)
source('~/Documents/thesis-git/data-analysis/questionnaire_data/calculate_mean.R', echo=TRUE)
source('~/Documents/thesis-git/data-analysis/questionnaire_data/cronbach-alpha.R', echo=TRUE)
source('~/Documents/thesis-git/data-analysis/questionnaire_data/calculate_mean.R', echo=TRUE)
source('~/Documents/thesis-git/data-analysis/questionnaire_data/calculate_mean.R', echo=TRUE)
source('~/Documents/thesis-git/data-analysis/questionnaire_data/calculate_mean.R', echo=TRUE)
cat(green(category), '\n')
source('~/Documents/thesis-git/data-analysis/questionnaire_data/calculate_mean.R', echo=TRUE)
source('~/Documents/thesis-git/data-analysis/questionnaire_data/calculate_mean.R', echo=TRUE)
source('~/Documents/thesis-git/data-analysis/questionnaire_data/t-test.R', echo=TRUE)
source('~/Documents/thesis-git/data-analysis/questionnaire_data/calculate_mean.R', echo=TRUE)
source('~/Documents/thesis-git/data-analysis/questionnaire_data/t-test.R', echo=TRUE)
for (category in categories_means)
{
cat(green(category), '\n')
print(shapiro.test(df_basic[[category]]))
printshapiro.test(df_extended[[category]])
}
for (category in categories_means)
{
cat(green(category), '\n')
print(shapiro.test(df_basic[[category]]))
print(shapiro.test(df_extended[[category]]))
}
for (category in categories_means)
{
cat(green(category))
print(shapiro.test(df_basic[[category]]))
print(shapiro.test(df_extended[[category]]))
}
for (category in categories_means)
{
cat(green(category))
print(shapiro.test(df_basic[[category]]))
print(shapiro.test(df_extended[[category]]))
}
print(royston.test(df_basic[[category]]))
install.packages('rpyston')
install.packages('royston')
library(royston)
install.packages('MVN')
library(MVN)
for (category in categories_means)
{
cat(green(category))
print(royston.test(df_basic[[category]]))
print(shapiro.test(df_extended[[category]]))
}
for (category in categories_means)
{
cat(green(category))
print(royston.test(df_basic[[category]]))
print(shapiro.test(df_extended[[category]]))
}
x <- shapiro.test(df_basic[[category]])
royston.test(x)
print(shapiro.test(df_basic[[category]]))
print(royston.test(df_basic[[category]]))
mvn(df_basic[[category]])
mvn(df_basic)
mvn(df_basic[4:])
mvn(df_basic[4:10])
mvn(df_basic[6:10])
mvn(df_basic[6:])
mvn(df_basic[6,])
mvn(df_basic[6:70])
print(shapiro.test(df_basic[[category]]))
mvn(df_basic[6:75])
mvn(df_basic[6:74])
mvn(df_basic[6:72])
mvn(df_basic[6:71])
mvn(df_basic[6:70])
mvn(df_basic[6:70, 72:80])
mvn(df_basic[6:70, 72:85])
mvn(df_basic[72:85])
mvn(df_basic[72:85])
mvn(df_extended[72:85])
print(shapiro.test(df_basic[[category]]))
print(shapiro.test(df_extended[[category]]))
cat(green(category))
# library(MVN)
for (category in categories_means)
{
cat(green(category))
# mvn(df_basic[72:85])
# mvn(df_extended[72:85])
print(shapiro.test(df_basic[[category]]))
print(shapiro.test(df_extended[[category]]))
}
source('~/Documents/thesis-git/data-analysis/questionnaire_data/cronbach-alpha.R', echo=TRUE)
